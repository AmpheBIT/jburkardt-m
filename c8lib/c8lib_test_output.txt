c8lib_test
01-Mar-2015 11:46:18

C8LIB_TEST
  MATLAB version
  Test the C8LIB library.

C8_ABS_TEST
  C8_ABS computes the absolute value of a C8.

       C1=C8_UNIFORM_01          R2=C8_ABS(C1)             R3=ABS(C1))
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)      0.466422      0.466422
  (   -0.567465     -0.797059)      0.978427      0.978427
  (    0.038567     -0.525981)      0.527393      0.527393
  (    0.007082     -0.188614)      0.188747      0.188747
  (    0.594470     -0.537153)      0.801204      0.801204
  (    0.193014     -0.675087)      0.702137      0.702137
  (    0.351515     -0.201470)      0.405158      0.405158
  (    0.258528      0.892305)      0.929002      0.929002
  (   -0.632219      0.014884)      0.632394      0.632394
  (   -0.607431     -0.407965)      0.731715      0.731715

C8_ACOS_TEST
  C8_ACOS computes the inverse cosine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_ACOS(C1)           C3 = C8_COS(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (    1.842579     -0.372734)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (    2.010654      0.794610)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    1.536661      0.504600)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    1.563837      0.187518)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    1.041719      0.587792)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    1.410789      0.639362)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    1.219948      0.212927)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    1.378315     -0.815611)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (    2.255060     -0.019207)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (    2.148513      0.469554)  (   -0.607431     -0.407965)

C8_ACOSH_TEST
  C8_ACOSH computes the inverse hyperbolic cosine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_ACOSH(C1)           C3 = C8_COSH(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (    0.372734      1.842579)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.794610      2.010654)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (   -0.504600      1.536661)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (   -0.187518      1.563837)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (   -0.587792      1.041719)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (   -0.639362      1.410789)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (   -0.212927      1.219948)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.815611      1.378315)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (    0.019207      2.255060)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.469554      2.148513)  (   -0.607431     -0.407965)

C8_ADD_TEST
  C8_ADD computes the sum of two C8's.

       C1=C8_UNIFORM_01          C2=C8_UNIFORM_01           C3 = C1+C2
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.567465     -0.797059)  (   -0.854779     -0.429635)
  (    0.038567     -0.525981)  (    0.007082     -0.188614)  (    0.045649     -0.714595)
  (    0.594470     -0.537153)  (    0.193014     -0.675087)  (    0.787484     -1.212240)
  (    0.351515     -0.201470)  (    0.258528      0.892305)  (    0.610043      0.690835)
  (   -0.632219      0.014884)  (   -0.607431     -0.407965)  (   -1.239650     -0.393081)
  (   -0.557291     -0.455610)  (   -0.113356     -0.856649)  (   -0.670647     -1.312258)
  (   -0.513617      0.268282)  (    0.099216     -0.946423)  (   -0.414402     -0.678141)
  (   -0.738137      0.319551)  (    0.775767     -0.211283)  (    0.037630      0.108268)
  (    0.337929      0.784052)  (    0.234194      0.389924)  (    0.572123      1.173976)
  (    0.303308     -0.934921)  (   -0.420641     -0.463573)  (   -0.117333     -1.398495)

C8_ARG_TEST
  C8_ARG computes the argument of a C8.

            C1=random            ARG=C8_ARG(C1)

   -0.287314    0.367424      2.234446
   -0.567465   -0.797059      4.093689
    0.038567   -0.525981      4.785582
    0.007082   -0.188614      4.749920
    0.594470   -0.537153      5.548394
    0.193014   -0.675087      4.990870
    0.351515   -0.201470      5.762744
    0.258528    0.892305      1.288788
   -0.632219    0.014884      3.118054
   -0.607431   -0.407965      3.733020

C8_ASIN_TEST
  C8_ASIN computes the inverse sine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_ASIN(C1)           C3 = C8_SIN(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.271783      0.372734)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.439858     -0.794610)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.034136     -0.504600)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.006960     -0.187518)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.529077     -0.587792)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.160007     -0.639362)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.350848     -0.212927)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.192481      0.815611)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.684263      0.019207)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.577717     -0.469554)  (   -0.607431     -0.407965)

C8_ASINH_TEST
  C8_ASINH computes the inverse hyperbolic sine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_ASINH(C1)           C3 = C8_SINH(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.302245      0.358914)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.684544     -0.695711)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.045313     -0.553234)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.007212     -0.189746)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.623497     -0.463797)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.252489     -0.713026)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.350776     -0.190837)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.432450      0.952575)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.596298      0.012581)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.608336     -0.349676)  (   -0.607431     -0.407965)

C8_ATAN_TEST
  C8_ATAN computes the inverse tangent of a C8.

       C1=C8_UNIFORM_01          C2 = C8_ATAN(C1)           C3 = C8_TAN(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.316720      0.349353)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.766603     -0.570037)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (   -3.088367     -0.583083)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (   -3.134249     -0.190889)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (   -2.502459     -0.391387)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (   -2.816216     -0.747767)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (   -2.791941     -0.180516)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (   -2.485658      0.959893)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.563845      0.010634)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.602766     -0.296054)  (   -0.607431     -0.407965)

C8_ATANH_TEST
  C8_ATANH computes the inverse hyperbolic tangent of a C8.

       C1=C8_UNIFORM_01          C2 = C8_ATANH(C1)           C3 = C8_TANH(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.256291      0.377017)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.331110      2.369578)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.030211      2.656896)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.006839      2.955160)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.458118      2.517057)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.132282      2.535803)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.349630      2.916991)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.142503      0.747102)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.744716      0.024784)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.537357      2.615003)  (   -0.607431     -0.407965)

C8_CONJ_TEST
  C8_CONJ computes the complex conjugate of a C8.

       C1=C8_UNIFORM_01          C2 = C8_CONJ(C1)           C3 = C8_CONJ(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.287314     -0.367424)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.567465      0.797059)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.038567      0.525981)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.007082      0.188614)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.594470      0.537153)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.193014      0.675087)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.351515      0.201470)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.258528     -0.892305)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.632219     -0.014884)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.607431      0.407965)  (   -0.607431     -0.407965)

C8_COS_TEST
  C8_COS computes the cosine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_COS(C1)           C3 = C8_ACOS(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (    1.024473      0.106478)  (    0.287314     -0.367424)
  (   -0.567465     -0.797059)  (    1.125616     -0.475241)  (    0.567465      0.797059)
  (    0.038567     -0.525981)  (    1.140698      0.021229)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    1.017815      0.001344)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.950864      0.315521)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    1.213694      0.139557)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.957971      0.069840)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    1.377866     -0.259626)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (    0.806808      0.008796)  (    0.632219     -0.014884)
  (   -0.607431     -0.407965)  (    0.890402     -0.239363)  (    0.607431      0.407965)

C8_COSH_TEST
  C8_COSH computes the hyperbolic cosine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_COSH(C1)           C3 = C8_ACOSH(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (    0.972041     -0.104633)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (    0.814380      0.428048)  (    0.567465      0.797059)
  (    0.038567     -0.525981)  (    0.865475     -0.019368)  (   -0.038567      0.525981)
  (    0.007082     -0.188614)  (    0.982290     -0.001328)  (   -0.007082      0.188614)
  (    0.594470     -0.537153)  (    1.015505     -0.322421)  (   -0.594470      0.537153)
  (    0.193014     -0.675087)  (    0.795239     -0.121378)  (   -0.193014      0.675087)
  (    0.351515     -0.201470)  (    1.040931     -0.071799)  (   -0.351515      0.201470)
  (    0.258528      0.892305)  (    0.648710      0.203519)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (    1.206463     -0.010049)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (    1.092547      0.256089)  (    0.607431      0.407965)

C8_CUBE_ROOT_TEST
  C8_CUBE_ROOT computes the principal cube root of a C8.

            C1=random            C2=C8_CUBE_ROOT(C1)         C3=C2*C2*C2

   -0.287314    0.367424      0.570173    0.525675      0.092645    0.041390
   -0.567465   -0.797059      0.739888   -0.661915      0.898802   -0.263624
    0.038567   -0.525981      0.709342   -0.386780     -0.031952    0.143169
    0.007082   -0.188614      0.500321   -0.280574     -0.000755    0.006682
    0.594470   -0.537153      0.901063   -0.225220     -0.304492   -0.414494
    0.193014   -0.675087      0.807609   -0.371141     -0.256704    0.232215
    0.351515   -0.201470      0.728853   -0.127726      0.000630   -0.066505
    0.258528    0.892305      0.887088    0.406404     -0.600248   -0.531545
   -0.632219    0.014884      0.434993    0.739960     -0.252278    0.017845
   -0.607431   -0.407965      0.594684   -0.677024      0.079169   -0.383683

C8_DIV_TEST
  C8_DIV computes C3 = C1 / C2.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3=C8_DIV(C1,C2)          C4=C1/C2
     ---------------------     ---------------------     ---------------------     ---------------------

        0.4499     -0.1267       -0.8432     -0.3443       -0.4047      0.3155       -0.4047      0.3155
        0.5896      0.2601        0.3911      0.3234        1.2219     -0.3453        1.2219     -0.3453
       -0.1395     -0.1561       -0.2361      0.0775        0.3374      0.7721        0.3374      0.7721
        0.0186     -0.6332        0.8928      0.0103        0.0126     -0.7094        0.0126     -0.7094
       -0.5605      0.7638        0.3064      0.0263       -1.6038      2.6307       -1.6038      2.6307
        0.5008     -0.7799        0.3505      0.0166        1.3209     -2.2878        1.3209     -2.2878
        0.4350     -0.2666       -0.2009      0.2707       -1.4040     -0.5646       -1.4040     -0.5646
       -0.0975      0.9019       -0.7702     -0.3143       -0.3011     -1.0480       -0.3011     -1.0480
       -0.8892      0.2657       -0.7799     -0.5512        0.5998     -0.7646        0.5998     -0.7646
        0.0314     -0.4336        0.2491      0.5787       -0.6124     -0.3178       -0.6124     -0.3178

C8_DIV_R8_TEST
  C8_DIV_R8 computes C3 = C1 / R2.

        C1=C8_UNIFORM_01          R2=R8_UNIFORM_01          C3=C8_DIV_R8(C1,R2)          C4=C1/R2
     ---------------------     ---------------------     ---------------------     ---------------------

        0.4499     -0.1267        0.8295                    0.5423     -0.1527        0.5423     -0.1527
       -0.8432     -0.3443        0.4153                   -2.0303     -0.8290       -2.0303     -0.8290
        0.5896      0.2601        0.2576                    2.2891      1.0098        2.2891      1.0098
        0.3911      0.3234        0.0438                    8.9242      7.3787        8.9242      7.3787
       -0.1395     -0.1561        0.0617                   -2.2594     -2.5294       -2.2594     -2.5294
       -0.2361      0.0775        0.4013                   -0.5882      0.1930       -0.5882      0.1930
        0.0186     -0.6332        0.7973                    0.0233     -0.7942        0.0233     -0.7942
        0.8928      0.0103        0.8975                    0.9948      0.0115        0.9948      0.0115
       -0.5605      0.7638        0.0945                   -5.9280      8.0787       -5.9280      8.0787
        0.3064      0.0263        0.8591                    0.3566      0.0306        0.3566      0.0306

C8_EXP_TEST
  C8_EXP computes the exponential of a C8.

       C1=C8_UNIFORM_01          C2=C8_EXP(C1)             C3=C8_LOG(C2))
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (    0.700200      0.269508)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (    0.396200     -0.405549)  (   -0.567465      5.486127)
  (    0.038567     -0.525981)  (    0.898837     -0.521803)  (    0.038567      5.757204)
  (    0.007082     -0.188614)  (    0.989246     -0.188830)  (    0.007082      6.094571)
  (    0.594470     -0.537153)  (    1.556874     -0.927222)  (    0.594470      5.746032)
  (    0.193014     -0.675087)  (    0.946854     -0.758020)  (    0.193014      5.608099)
  (    0.351515     -0.201470)  (    1.392473     -0.284400)  (    0.351515      6.081715)
  (    0.258528      0.892305)  (    0.812781      1.008202)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (    0.531352      0.007909)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (    0.500041     -0.216125)  (   -0.607431      5.875220)

C8_I_TEST
  C8_I computes the imaginary unit I.

  C1 = C8_I ( ) = (0,1)
  C2 = C1 * C1 = (-1,0)

C8_IMAG_TEST
  C8_IMAG computes the imaginary part of a C8.

       C1=C8_UNIFORM_01         R2=C8_IMAG(C1)             R3=IMAG(C1))
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)      0.367424      0.367424
  (   -0.567465     -0.797059)     -0.797059     -0.797059
  (    0.038567     -0.525981)     -0.525981     -0.525981
  (    0.007082     -0.188614)     -0.188614     -0.188614
  (    0.594470     -0.537153)     -0.537153     -0.537153
  (    0.193014     -0.675087)     -0.675087     -0.675087
  (    0.351515     -0.201470)     -0.201470     -0.201470
  (    0.258528      0.892305)      0.892305      0.892305
  (   -0.632219      0.014884)      0.014884      0.014884
  (   -0.607431     -0.407965)     -0.407965     -0.407965

C8_INV_TEST
  C8_INV computes the inverse of a C8.

       C1=C8_UNIFORM_01          C2 = C8_INV(C1)           C3 = C8_INV(C2)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -1.320683     -1.688920)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.592765      0.832595)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.138659      1.891041)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.198796      5.294369)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.926069      0.836781)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.391513      1.369354)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    2.141387      1.227331)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.299553     -1.033903)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -1.580854     -0.037218)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -1.134520      0.761971)  (   -0.607431     -0.407965)

C8_LE_L1_TEST
  C8_LE_L1 evalues (C1 <= C2) using the L1 norm.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01         L3=C8_LE_L1(C1,C2)
     ---------------------     ---------------------     ---------------------

        0.4499,     -0.1267       -0.8432,     -0.3443          1
        0.5896,      0.2601        0.3911,      0.3234          0
       -0.1395,     -0.1561       -0.2361,      0.0775          1
        0.0186,     -0.6332        0.8928,      0.0103          1
       -0.5605,      0.7638        0.3064,      0.0263          0
        0.5008,     -0.7799        0.3505,      0.0166          0
        0.4350,     -0.2666       -0.2009,      0.2707          0
       -0.0975,      0.9019       -0.7702,     -0.3143          1
       -0.8892,      0.2657       -0.7799,     -0.5512          1
        0.0314,     -0.4336        0.2491,      0.5787          1

C8_LE_L2_TEST
  C8_LE_L2 evalues (C1 <= C2) using the L2 norm.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01         L3=C8_LE_L2(C1,C2)
     ---------------------     ---------------------     ---------------------

        0.4499,     -0.1267       -0.8432,     -0.3443          1
        0.5896,      0.2601        0.3911,      0.3234          0
       -0.1395,     -0.1561       -0.2361,      0.0775          1
        0.0186,     -0.6332        0.8928,      0.0103          1
       -0.5605,      0.7638        0.3064,      0.0263          0
        0.5008,     -0.7799        0.3505,      0.0166          0
        0.4350,     -0.2666       -0.2009,      0.2707          0
       -0.0975,      0.9019       -0.7702,     -0.3143          0
       -0.8892,      0.2657       -0.7799,     -0.5512          1
        0.0314,     -0.4336        0.2491,      0.5787          1

C8_LE_LI_TEST
  C8_LE_LI evalues (C1 <= C2) using the Loo norm.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01         L3=C8_LE_LI(C1,C2)
     ---------------------     ---------------------     ---------------------

        0.4499,     -0.1267       -0.8432,     -0.3443          1
        0.5896,      0.2601        0.3911,      0.3234          0
       -0.1395,     -0.1561       -0.2361,      0.0775          1
        0.0186,     -0.6332        0.8928,      0.0103          1
       -0.5605,      0.7638        0.3064,      0.0263          0
        0.5008,     -0.7799        0.3505,      0.0166          0
        0.4350,     -0.2666       -0.2009,      0.2707          0
       -0.0975,      0.9019       -0.7702,     -0.3143          0
       -0.8892,      0.2657       -0.7799,     -0.5512          0
        0.0314,     -0.4336        0.2491,      0.5787          1

C8_LOG_TEST
  C8_LOG computes the logarithm of a C8.

       C1=C8_UNIFORM_01          C2=C8_LOG(C1)             C3=C8_EXP(C2))
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.762664      2.234446)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.021810      4.093689)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (   -0.639809      4.785582)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (   -1.667348      4.749920)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (   -0.221640      5.548394)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (   -0.353626      4.990870)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (   -0.903479      5.762744)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (   -0.073644      1.288788)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.458242      3.118054)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.312364      3.733020)  (   -0.607431     -0.407965)

C8_MAG_TEST
  C8_MAG computes the magnitude of a C8.

       C1=C8_UNIFORM_01          R2=C8_MAG(C1)             R3=ABS(C1))
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)      0.466422      0.466422
  (   -0.567465     -0.797059)      0.978427      0.978427
  (    0.038567     -0.525981)      0.527393      0.527393
  (    0.007082     -0.188614)      0.188747      0.188747
  (    0.594470     -0.537153)      0.801204      0.801204
  (    0.193014     -0.675087)      0.702137      0.702137
  (    0.351515     -0.201470)      0.405158      0.405158
  (    0.258528      0.892305)      0.929002      0.929002
  (   -0.632219      0.014884)      0.632394      0.632394
  (   -0.607431     -0.407965)      0.731715      0.731715

C8_MUL_TEST
  C8_MUL computes C3 = C1 * C2.

        C1=C8_UNIFORM_01          C2=C8_UNIFORM_01          C3=C8_MUL(C1,C2)          C4=C1*C2
     ---------------------     ---------------------     ---------------------     ---------------------

        0.4499     -0.1267       -0.8432     -0.3443       -0.4229     -0.0481       -0.4229     -0.0481
        0.5896      0.2601        0.3911      0.3234        0.1465      0.2924        0.1465      0.2924
       -0.1395     -0.1561       -0.2361      0.0775        0.0450      0.0261        0.0450      0.0261
        0.0186     -0.6332        0.8928      0.0103        0.0231     -0.5652        0.0231     -0.5652
       -0.5605      0.7638        0.3064      0.0263       -0.1918      0.2193       -0.1918      0.2193
        0.5008     -0.7799        0.3505      0.0166        0.1884     -0.2651        0.1884     -0.2651
        0.4350     -0.2666       -0.2009      0.2707       -0.0152      0.1713       -0.0152      0.1713
       -0.0975      0.9019       -0.7702     -0.3143        0.3585     -0.6640        0.3585     -0.6640
       -0.8892      0.2657       -0.7799     -0.5512        0.8399      0.2829        0.8399      0.2829
        0.0314     -0.4336        0.2491      0.5787        0.2587     -0.0898        0.2587     -0.0898

C8_NINT_TEST
  C8_NINT computes the nearest integer to a C8.

       C1=10*C8_UNIFORM_01          C2=C8_NINT(C1)
     ---------------------     ---------------------

  (   -2.873141      3.674237)  (   -3.000000      4.000000)
  (   -5.674647     -7.970585)  (   -6.000000     -8.000000)
  (    0.385671     -5.259813)  (    0.000000     -5.000000)
  (    0.070822     -1.886140)  (    0.000000     -2.000000)
  (    5.944697     -5.371534)  (    6.000000     -5.000000)
  (    1.930145     -6.750867)  (    2.000000     -7.000000)
  (    3.515149     -2.014700)  (    4.000000     -2.000000)
  (    2.585280      8.923053)  (    3.000000      9.000000)
  (   -6.322190      0.148845)  (   -6.000000      0.000000)
  (   -6.074306     -4.079652)  (   -6.000000     -4.000000)

C8_NORM_L1_TEST
  C8_NORM_L1 computes the L1 norm of a C8.

       C1=C8_UNIFORM_01          R2=C8_NORM_L1(C1)
     ---------------------     ---------------------

      0.449860,   -0.126667      0.576527
     -0.843197,   -0.344280      1.187477
      0.589627,    0.260090      0.849717
      0.391140,    0.323400      0.714540
     -0.139466,   -0.156136      0.295601
     -0.236066,    0.077459      0.313526
      0.018599,   -0.633214      0.651814
      0.892850,    0.010314      0.903163
     -0.560465,    0.763795      1.324260
      0.306357,    0.026275      0.332632

C8_NORM_L2_TEST
  C8_NORM_L2 computes the L2 norm of a C8.

       C1=C8_UNIFORM_01          R2=C8_NORM_L2(C1)
     ---------------------     ---------------------

      0.449860,   -0.126667      0.467352
     -0.843197,   -0.344280      0.910774
      0.589627,    0.260090      0.644443
      0.391140,    0.323400      0.507521
     -0.139466,   -0.156136      0.209354
     -0.236066,    0.077459      0.248450
      0.018599,   -0.633214      0.633487
      0.892850,    0.010314      0.892909
     -0.560465,    0.763795      0.947367
      0.306357,    0.026275      0.307481

C8_NORM_LI_TEST
  C8_NORM_LI computes the Loo norm of a C8.

       C1=C8_UNIFORM_01          R2=C8_NORM_LI(C1)
     ---------------------     ---------------------

      0.449860,   -0.126667      0.449860
     -0.843197,   -0.344280      0.843197
      0.589627,    0.260090      0.589627
      0.391140,    0.323400      0.391140
     -0.139466,   -0.156136      0.156136
     -0.236066,    0.077459      0.236066
      0.018599,   -0.633214      0.633214
      0.892850,    0.010314      0.892850
     -0.560465,    0.763795      0.763795
      0.306357,    0.026275      0.306357

C8_NORMAL_01_TEST
  C8_NORMAL_01 generates unit pseudonormal
   complex values.
  Using initial random number seed = 123456789

      1.679040     -0.472769
     -0.566060     -0.231124
      1.212934      0.535037
      1.269381      1.049543
     -1.666087     -1.865228
     -2.242464      0.735809
      0.039675     -1.350736
      0.673068      0.007775
     -0.275127      0.374940
      2.164005      0.185600
      0.297785     -0.463758
      2.044536      0.096577
      1.398819     -0.857394
     -1.242985      1.674516
     -0.067084      0.620783
     -0.794396     -0.324163
     -0.523768      0.156483
     -0.350567     -0.247757
      0.131700     -1.820756
      0.537380      1.248567

C8_ONE_TEST
  C8_ONE returns one as a C8.

  C1 = C8_ONE ( ) = (1,0)
  C2 = C1 + C1 = (2,0)

C8_PRINT_TEST
  C8_PRINT prints a C8.

  Zero:  ( 0, 0 )
  One:  ( 1, 0 )
  Pi:  ( 3.14159, 0 )
  i:  ( 0, 1 )
  1+2i:  ( 1, 2 )
 -12.34 + 56.78i:  ( -12.34, 56.78 )
  1E-3 + 2E-6i  ( 0.001, 2e-06 )
  3E8 - 4.5E9i:  ( 3e+08, -4.5e+09 )

C8_REAL_TEST
  C8_REAL computes the real part of a C8.

       C1=C8_UNIFORM_01         R2=C8_REAL(C1)             R3=REAL(C1))
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)     -0.287314     -0.287314
  (   -0.567465     -0.797059)     -0.567465     -0.567465
  (    0.038567     -0.525981)      0.038567      0.038567
  (    0.007082     -0.188614)      0.007082      0.007082
  (    0.594470     -0.537153)      0.594470      0.594470
  (    0.193014     -0.675087)      0.193014      0.193014
  (    0.351515     -0.201470)      0.351515      0.351515
  (    0.258528      0.892305)      0.258528      0.258528
  (   -0.632219      0.014884)     -0.632219     -0.632219
  (   -0.607431     -0.407965)     -0.607431     -0.607431

C8_SIN_TEST
  C8_SIN computes the sine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_SIN(C1)           C3 = C8_ASIN(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.302722      0.360344)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.717465     -0.745596)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.044015     -0.550162)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.007208     -0.189730)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.642831     -0.466713)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.237214     -0.714035)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.351332     -0.190433)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.364371      0.981771)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.591002      0.012008)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.618919     -0.344357)  (   -0.607431     -0.407965)

C8_SINH_TEST
  C8_SINH computes the hyperbolic sine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_SINH(C1)           C3 = C8_ASINH(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.271842      0.374141)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.418180     -0.833597)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.033362     -0.502435)  (    0.038567     -0.525981)
  (    0.007082     -0.188614)  (    0.006957     -0.187502)  (    0.007082     -0.188614)
  (    0.594470     -0.537153)  (    0.541369     -0.604801)  (    0.594470     -0.537153)
  (    0.193014     -0.675087)  (    0.151615     -0.636643)  (    0.193014     -0.675087)
  (    0.351515     -0.201470)  (    0.351542     -0.212601)  (    0.351515     -0.201470)
  (    0.258528      0.892305)  (    0.164071      0.804683)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.675110      0.017959)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.592505     -0.472214)  (   -0.607431     -0.407965)

C8_SQRT_TEST
  C8_SQRT computes the principal square root of a C8.

            C1=random            C2=C8_SQRT(C1)         C3=C2*C2

   -0.287314    0.367424      0.299256    0.613896     -0.052451   -0.211132
   -0.567465   -0.797059     -0.453300    0.879173     -0.313286    0.904605
    0.038567   -0.525981     -0.531959    0.494382     -0.275169   -0.040571
    0.007082   -0.188614     -0.312913    0.301384     -0.035525   -0.002672
    0.594470   -0.537153     -0.835366    0.321508      0.064860   -0.638643
    0.193014   -0.675087     -0.669011    0.504541     -0.418487   -0.260603
    0.351515   -0.201470     -0.615091    0.163773      0.082973   -0.141639
    0.258528    0.892305      0.770562    0.578997     -0.729372    0.461372
   -0.632219    0.014884      0.009359    0.795177      0.399479   -0.018821
   -0.607431   -0.407965     -0.249284    0.818274      0.202536    0.495621

C8_SUB_TEST
  C8_SUB computes the difference of two C8's.

       C1=C8_UNIFORM_01          C2=C8_UNIFORM_01           C3 = C1-C2
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.567465     -0.797059)  (    0.280151      1.164482)
  (    0.038567     -0.525981)  (    0.007082     -0.188614)  (    0.031485     -0.337367)
  (    0.594470     -0.537153)  (    0.193014     -0.675087)  (    0.401455      0.137933)
  (    0.351515     -0.201470)  (    0.258528      0.892305)  (    0.092987     -1.093775)
  (   -0.632219      0.014884)  (   -0.607431     -0.407965)  (   -0.024788      0.422850)
  (   -0.557291     -0.455610)  (   -0.113356     -0.856649)  (   -0.443935      0.401039)
  (   -0.513617      0.268282)  (    0.099216     -0.946423)  (   -0.612833      1.214706)
  (   -0.738137      0.319551)  (    0.775767     -0.211283)  (   -1.513903      0.530834)
  (    0.337929      0.784052)  (    0.234194      0.389924)  (    0.103735      0.394128)
  (    0.303308     -0.934921)  (   -0.420641     -0.463573)  (    0.723948     -0.471348)

C8_TAN_TEST
  C8_TAN computes the tangent of a C8.

       C1=C8_UNIFORM_01          C2 = C8_TAN(C1)           C3 = C8_ATAN(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.256165      0.378361)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.303612     -0.790576)  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)  (    0.029600     -0.482854)  (   -3.103026     -0.525981)
  (    0.007082     -0.188614)  (    0.006836     -0.186418)  (   -3.134510     -0.188614)
  (    0.594470     -0.537153)  (    0.462278     -0.644226)  (   -2.547123     -0.537153)
  (    0.193014     -0.675087)  (    0.126132     -0.602819)  (   -2.948578     -0.675087)
  (    0.351515     -0.201470)  (    0.350391     -0.224333)  (   -2.790078     -0.201470)
  (    0.258528      0.892305)  (    0.125723      0.736220)  (   -2.883065      0.892305)
  (   -0.632219      0.014884)  (   -0.732270      0.022867)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.551294     -0.534946)  (   -0.607431     -0.407965)

C8_TANH_TEST
  C8_TANH computes the hyperbolic sine of a C8.

       C1=C8_UNIFORM_01          C2 = C8_TANH(C1)           C3 = C8_ATANH(C1)
     ---------------------     ---------------------     ---------------------

  (   -0.287314      0.367424)  (   -0.317415      0.350735)  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)  (   -0.823894     -0.590548)  (   -0.567465      2.344534)
  (    0.038567     -0.525981)  (    0.051514     -0.579379)  (    0.038567      2.615611)
  (    0.007082     -0.188614)  (    0.007340     -0.190873)  (    0.007082      2.952979)
  (    0.594470     -0.537153)  (    0.656060     -0.387269)  (    0.594470      2.604439)
  (    0.193014     -0.675087)  (    0.305722     -0.753905)  (    0.193014      2.466506)
  (    0.351515     -0.201470)  (    0.350140     -0.180090)  (    0.351515      2.940123)
  (    0.258528      0.892305)  (    0.584544      1.057047)  (    0.258528      0.892305)
  (   -0.632219      0.014884)  (   -0.559663      0.010224)  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)  (   -0.610105     -0.289208)  (   -0.607431      2.733627)

C8_TO_CARTESIAN_TEST
  C8_TO_CARTESIAN converts C8 to (X,Y).

        C1=C8_UNIFORM_01       (X2,Y2)=C8_TO_CARTESIAN(C1)     C3=CARTESIAN_TO_C8(X2,Y2)
       ----------------------       ----------------------      -----------------------

  (    0.449860     -0.126667)      0.449860     -0.126667  (    0.449860     -0.126667)
  (   -0.843197     -0.344280)     -0.843197     -0.344280  (   -0.843197     -0.344280)
  (    0.589627      0.260090)      0.589627      0.260090  (    0.589627      0.260090)
  (    0.391140      0.323400)      0.391140      0.323400  (    0.391140      0.323400)
  (   -0.139466     -0.156136)     -0.139466     -0.156136  (   -0.139466     -0.156136)
  (   -0.236066      0.077459)     -0.236066      0.077459  (   -0.236066      0.077459)
  (    0.018599     -0.633214)      0.018599     -0.633214  (    0.018599     -0.633214)
  (    0.892850      0.010314)      0.892850      0.010314  (    0.892850      0.010314)
  (   -0.560465      0.763795)     -0.560465      0.763795  (   -0.560465      0.763795)
  (    0.306357      0.026275)      0.306357      0.026275  (    0.306357      0.026275)

C8_TO_POLAR_TEST
  C8_TO_POLAR converts C8 to polar form.

        C1=C8_UNIFORM_01       (R2,T2)=C8_TO_POLAR(C1)     C3=POLAR_TO_C8(R2,T2)
       ----------------------       ----------------------      -----------------------

  (    0.449860     -0.126667)      0.467352      6.008721  (    0.449860     -0.126667)
  (   -0.843197     -0.344280)      0.910774      3.529237  (   -0.843197     -0.344280)
  (    0.589627      0.260090)      0.644443      0.415436  (    0.589627      0.260090)
  (    0.391140      0.323400)      0.507521      0.690879  (    0.391140      0.323400)
  (   -0.139466     -0.156136)      0.209354      3.983324  (   -0.139466     -0.156136)
  (   -0.236066      0.077459)      0.248450      2.824537  (   -0.236066      0.077459)
  (    0.018599     -0.633214)      0.633487      4.741753  (    0.018599     -0.633214)
  (    0.892850      0.010314)      0.892909      0.011551  (    0.892850      0.010314)
  (   -0.560465      0.763795)      0.947367      2.203842  (   -0.560465      0.763795)
  (    0.306357      0.026275)      0.307481      0.085557  (    0.306357      0.026275)

C8_UNIFORM_01_TEST
  C8_UNIFORM_01 returns a uniformly random "unit" C8.

       C1=C8_UNIFORM_01
     ---------------------

  (   -0.287314      0.367424)
  (   -0.567465     -0.797059)
  (    0.038567     -0.525981)
  (    0.007082     -0.188614)
  (    0.594470     -0.537153)
  (    0.193014     -0.675087)
  (    0.351515     -0.201470)
  (    0.258528      0.892305)
  (   -0.632219      0.014884)
  (   -0.607431     -0.407965)

C8_ZERO_TEST
  C8_ZERO returns zero as a C8

  C1 = C8_ZERO ( ) = (0,0)

C8MAT_IDENTITY_TEST
  C8MAT_IDENTITY returns the complex identity matrix.

  The identity matrix:

  Col:          1                   2                   3                   4          
  Row
  ---
    1:  1.000000                 0.0                 0.0                 0.0          
    2:       0.0            1.000000                 0.0                 0.0          
    3:       0.0                 0.0            1.000000                 0.0          
    4:       0.0                 0.0                 0.0            1.000000          

C8MAT_INDICATOR_TEST
  C8MAT_INDICATOR returns the complex indicator matrix.

  The indicator matrix:

  Col:          1                   2                   3          
  Row
  ---
    1:  1.000000  1.000000  1.000000  2.000000  1.000000  3.000000
    2:  2.000000  1.000000  2.000000  2.000000  2.000000  3.000000
    3:  3.000000  1.000000  3.000000  2.000000  3.000000  3.000000
    4:  4.000000  1.000000  4.000000  2.000000  4.000000  3.000000
    5:  5.000000  1.000000  5.000000  2.000000  5.000000  3.000000

C8MAT_NORM_FRO_TEST
  C8MAT_NORM_FRO returns the Frobenius norm of a C8MAT.

  The indicator matrix:

  Col:          1                   2                   3                   4          
  Row
  ---
    1:  1.000000  1.000000  1.000000  2.000000  1.000000  3.000000  1.000000  4.000000
    2:  2.000000  1.000000  2.000000  2.000000  2.000000  3.000000  2.000000  4.000000
    3:  3.000000  1.000000  3.000000  2.000000  3.000000  3.000000  3.000000  4.000000
    4:  4.000000  1.000000  4.000000  2.000000  4.000000  3.000000  4.000000  4.000000
    5:  5.000000  1.000000  5.000000  2.000000  5.000000  3.000000  5.000000  4.000000

  Frobenius norm = 19.2354

C8MAT_NORM_L1_TEST
  C8MAT_NORM_L1 returns the L1 norm of a C8MAT.

  The indicator matrix:

  Col:          1                   2                   3                   4          
  Row
  ---
    1:  1.000000  1.000000  1.000000  2.000000  1.000000  3.000000  1.000000  4.000000
    2:  2.000000  1.000000  2.000000  2.000000  2.000000  3.000000  2.000000  4.000000
    3:  3.000000  1.000000  3.000000  2.000000  3.000000  3.000000  3.000000  4.000000
    4:  4.000000  1.000000  4.000000  2.000000  4.000000  3.000000  4.000000  4.000000
    5:  5.000000  1.000000  5.000000  2.000000  5.000000  3.000000  5.000000  4.000000

  L1 norm = 25.6552

C8MAT_NORM_LI_TEST
  C8MAT_NORM_LI returns the Loo norm of a C8MAT.

  The indicator matrix:

  Col:          1                   2                   3                   4          
  Row
  ---
    1:  1.000000  1.000000  1.000000  2.000000  1.000000  3.000000  1.000000  4.000000
    2:  2.000000  1.000000  2.000000  2.000000  2.000000  3.000000  2.000000  4.000000
    3:  3.000000  1.000000  3.000000  2.000000  3.000000  3.000000  3.000000  4.000000
    4:  4.000000  1.000000  4.000000  2.000000  4.000000  3.000000  4.000000  4.000000
    5:  5.000000  1.000000  5.000000  2.000000  5.000000  3.000000  5.000000  4.000000

  Loo norm = 22.7183

C8MAT_UNIFORM_01_TEST
  C8MAT_UNIFORM_01 computes a "random" complex matrix.

  The matrix:

  Col:          1                   2                   3                   4          
  Row
  ---
    1:  0.449860 -0.126667 -0.236066  0.077459  0.500804 -0.779931 -0.770245 -0.314307
    2: -0.843197 -0.344280  0.018599 -0.633214  0.350471  0.016555 -0.889181  0.265655
    3:  0.589627  0.260090  0.892850  0.010314  0.434989 -0.266623 -0.779871 -0.551160
    4:  0.391140  0.323400 -0.560465  0.763795 -0.200947  0.270711  0.031360 -0.433556
    5: -0.139466 -0.156136  0.306357  0.026275 -0.097460  0.901881  0.249089  0.578743

C8VEC_INDICATOR_TEST
  C8VEC_INDICATOR sets A = (1-1i,2-2i,...,N-Ni)

  The "indicator" vector:

       1: 1-1i
       2: 2-2i
       3: 3-3i
       4: 4-4i
       5: 5-5i
       6: 6-6i
       7: 7-7i
       8: 8-8i
       9: 9-9i
      10: 10-10i

C8VEC_NINT_TEST
  C8VEC_NINT rounds a C8VEC

  The initial vector:

       1: 2.6293+0.71624i
       2: -3.1831-4.251i
       3: 2.1679+3.0693i
       4: 0.9855+2.7904i
       5: -0.22892-1.1991i

  The rounded vector:

       1: 3+1i
       2: -3-4i
       3: 2+3i
       4: 1+3i
       5: 0-1i

C8VEC_NORM_L1_TEST
  C8VEC_NORM_L1 computes the L1 norm of a C8VEC.

  The "indicator" vector:

       1: 1-1i
       2: 2-2i
       3: 3-3i
       4: 4-4i
       5: 5-5i

  L1 norm = 21.2132

C8VEC_NORM_L2_TEST
  C8VEC_NORM_L2 computes the L2 norm of a C8VEC.

  The "indicator" vector:

       1: 1-1i
       2: 2-2i
       3: 3-3i
       4: 4-4i
       5: 5-5i

  L2 norm = 10.4881

C8VEC_NORM_LI_TEST
  C8VEC_NORM_LI computes the Loo norm of a C8VEC.

  The "indicator" vector:

       1: 1-1i
       2: 2-2i
       3: 3-3i
       4: 4-4i
       5: 5-5i

  Loo norm = 7.07107

C8VEC_PRINT_TEST
  C8VEC_PRINT prints a C8VEC

  The "indicator" vector:

       1: 1-1i
       2: 2-2i
       3: 3-3i
       4: 4-4i
       5: 5-5i

C8VEC_SPIRAL_TEST
  C8VEC_SPIRAL returns N points on a spiral
  which includes M complete turns.

  The spiral points:

       1: 5
       2: 4.1858+2.4167i
       3: 2.3333+4.0415i
       4: 2.7555e-16+4.5i
       5: -2.1667+3.7528i
       6: -3.6084+2.0833i
       7: -4+4.8986e-16i
       8: -3.3198-1.9167i
       9: -1.8333-3.1754i
      10: -6.4294e-16-3.5i
      11: 1.6667-2.8868i
      12: 2.7424-1.5833i
      13: 3-7.3479e-16i

C8VEC_UNIFORM_01_TEST
  C8VEC_UNIFORM_01_TEST returns a random C8VEC

  The random C8VEC:

       1: 0.44986-0.12667i
       2: -0.8432-0.34428i
       3: 0.58963+0.26009i
       4: 0.39114+0.3234i
       5: -0.13947-0.15614i

C8VEC_UNITY_TEST
  C8VEC_UNITY sets A to the N roots of unity

  The N roots of unity:

       1: 1
       2: 0.86603+0.5i
       3: 0.5+0.86603i
       4: 6.1232e-17+1i
       5: -0.5+0.86603i
       6: -0.86603+0.5i
       7: -1+1.2246e-16i
       8: -0.86603-0.5i
       9: -0.5-0.86603i
      10: -1.837e-16-1i
      11: 0.5-0.86603i
      12: 0.86603-0.5i

CARTESIAN_TO_C8_TEST
  CARTESIAN_TO_C8 converts (X,Y) to C8.

        X1,Y1=R8_UNIFORM_01    C2=CARTESIAN_TO_C8(X1,Y1)     X3,Y3=C8_TO_CARTESIAN(C2)
       ----------------------       ----------------------      -----------------------

      0.218418      0.956318  (    0.218418      0.956318)      0.218418      0.956318
      0.829509      0.561695  (    0.829509      0.561695)      0.829509      0.561695
      0.415307      0.066119  (    0.415307      0.066119)      0.415307      0.066119
      0.257578      0.109957  (    0.257578      0.109957)      0.257578      0.109957
      0.043829      0.633966  (    0.043829      0.633966)      0.043829      0.633966
      0.061727      0.449539  (    0.061727      0.449539)      0.061727      0.449539
      0.401306      0.754673  (    0.401306      0.754673)      0.401306      0.754673
      0.797287      0.001838  (    0.797287      0.001838)      0.797287      0.001838
      0.897504      0.350752  (    0.897504      0.350752)      0.897504      0.350752
      0.094545      0.013617  (    0.094545      0.013617)      0.094545      0.013617

POLAR_TO_C8 converts polar form to C8.

      (R1,T1)=R8_UNIFORM_01()    C2=POLAR_TO_C8(R1,T1)    (R3,T3)=C8_TO_POLAR(C2)
       ----------------------       ----------------------      -----------------------

      0.218418      6.008721  (    0.210243     -0.059198)      0.218418      6.008721
      0.829509      3.529237  (   -0.767962     -0.313561)      0.829509      3.529237
      0.415307      0.415436  (    0.379981      0.167613)      0.415307      0.415436
      0.257578      0.690879  (    0.198512      0.164132)      0.257578      0.690879
      0.043829      3.983324  (   -0.029198     -0.032688)      0.043829      3.983324
      0.061727      2.824537  (   -0.058651      0.019245)      0.061727      2.824537
      0.401306      4.741753  (    0.011782     -0.401133)      0.401306      4.741753
      0.797287      0.011551  (    0.797234      0.009209)      0.797287      0.011551
      0.897504      2.203842  (   -0.530966      0.723594)      0.897504      2.203842
      0.094545      0.085557  (    0.094199      0.008079)      0.094545      0.085557

R8_ATAN_TEST
  R8_ATAN computes the arc-tangent given Y and X;
  ATAN2 is the system version of this routine.

  X     Y     ATAN2(Y,X)   R8_ATAN(Y,X)

      1.000000      0.000000      0.000000      0.000000
      1.000000      1.000000      0.785398      0.785398
      0.000000      1.000000      1.570796      1.570796
     -1.000000      1.000000      2.356194      2.356194
     -1.000000      0.000000      3.141593      3.141593
     -1.000000     -1.000000     -2.356194      3.926991
      0.000000     -1.000000     -1.570796      4.712389
      1.000000     -1.000000     -0.785398      5.497787

R8_SIGN_TEST
  R8_SIGN returns the sign of an R8.

    R8  R8_SIGN(R8)

  -1.250000  -1.000000
  -0.250000  -1.000000
  0.000000  1.000000
  0.500000  1.000000
  9.000000  1.000000

R8_UNIFORM_01_TEST
  R8_UNIFORM_01 produces a sequence of random values.

  Using random seed 123456789

  SEED  R8_UNIFORM_01(SEED)

     469049721        0.218418
    2053676357        0.956318
    1781357515        0.829509
    1206231778        0.561695
     891865166        0.415307
     141988902        0.066119
     553144097        0.257578
     236130416        0.109957
      94122056        0.043829
    1361431000        0.633966

  Verify that the sequence can be restarted.
  Set the seed back to its original value, and see that
  we generate the same sequence.

  SEED  R8_UNIFORM_01(SEED)

     469049721        0.218418
    2053676357        0.956318
    1781357515        0.829509
    1206231778        0.561695
     891865166        0.415307
     141988902        0.066119
     553144097        0.257578
     236130416        0.109957
      94122056        0.043829
    1361431000        0.633966

R8POLY2_ROOT_TEST
  R8POLY2_ROOT finds quadratic equation roots.

         A         B         C     R1         R2

   2.000000  -2.000000  -24.000000   4.000000  -3.000000
   1.000000  -20.000000  100.000000  10.000000  10.000000
   1.000000  -2.000000  10.000000   1.000000   1.000000

R8POLY3_ROOT_TEST
  R8POLY3_ROOT finds roots of cubic equations.


  Polynomial coefficients:

  A = 1.000000, B = -6.000000, C = 11.000000, D = -6.000000

  Roots:

  1.000000
  3.000000
  2.000000

  Polynomial coefficients:

  A = 9.000000, B = -36.000000, C = 54.000000, D = -27.000000

  Roots:

  1.000000
  1.500000
  1.500000

  Polynomial coefficients:

  A = 1.000000, B = -5.000000, C = 8.000000, D = -4.000000

  Roots:

  1.000000
  2.000000
  2.000000

  Polynomial coefficients:

  A = 1.000000, B = -8.000000, C = 25.000000, D = -26.000000

  Roots:

  2.000000
  3.000000
  3.000000

R8POLY4_ROOT_TEST
  R8POLY4_ROOT finds roots of quartic equations.


  A = 1.000000
  B = -10.000000
  C = 35.000000
  D = -50.000000
  E = 24.000000

  Roots:

  4.000000
  1.000000
  3.000000
  2.000000

  A = 1.000000
  B = -5.000000
  C = 1.000000
  D = 21.000000
  E = -18.000000

  Roots:

  3.000000
  3.000000
  1.000000
  -2.000000

  A = 1.000000
  B = -22.000000
  C = 141.000000
  D = -220.000000
  E = 100.000000

  Roots:

  10.000000
  10.000000
  1.000000
  1.000000

  A = 1.000000
  B = -16.000000
  C = 72.000000
  D = -128.000000
  E = 80.000000

  Roots:

  10.000000
  2.000000
  2.000000
  2.000000

  A = 1.000000
  B = -20.000000
  C = 150.000000
  D = -500.000000
  E = 625.000000

  Roots:

  5.000000
  5.000000
  5.000000
  5.000000

  A = 1.000000
  B = 2.000000
  C = 1.000000
  D = 8.000000
  E = -12.000000

  Roots:

  -0.000000
  -0.000000
  1.000000
  -3.000000

  A = 1.000000
  B = 0.000000
  C = 13.000000
  D = 0.000000
  E = 36.000000

  Roots:

  0.000000
  0.000000
  0.000000
  -0.000000

C8LIB_TEST
  Normal end of execution.

01-Mar-2015 11:46:18
diary off
